// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ERC725Registry extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ERC725Registry entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ERC725Registry entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ERC725Registry", id.toString(), this);
  }

  static load(id: string): ERC725Registry | null {
    return store.get("ERC725Registry", id) as ERC725Registry | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get addresses(): Array<Bytes> | null {
    let value = this.get("addresses");
    if (value === null) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set addresses(value: Array<Bytes> | null) {
    if (value === null) {
      this.unset("addresses");
    } else {
      this.set("addresses", Value.fromBytesArray(value as Array<Bytes>));
    }
  }
}

export class ERC725 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ERC725 entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ERC725 entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ERC725", id.toString(), this);
  }

  static load(id: string): ERC725 | null {
    return store.get("ERC725", id) as ERC725 | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractsCreated(): Array<Bytes> | null {
    let value = this.get("contractsCreated");
    if (value === null) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set contractsCreated(value: Array<Bytes> | null) {
    if (value === null) {
      this.unset("contractsCreated");
    } else {
      this.set("contractsCreated", Value.fromBytesArray(value as Array<Bytes>));
    }
  }

  get dataStore(): Array<Bytes> | null {
    let value = this.get("dataStore");
    if (value === null) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set dataStore(value: Array<Bytes> | null) {
    if (value === null) {
      this.unset("dataStore");
    } else {
      this.set("dataStore", Value.fromBytesArray(value as Array<Bytes>));
    }
  }
}

export class ERC725DataStore extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ERC725DataStore entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ERC725DataStore entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ERC725DataStore", id.toString(), this);
  }

  static load(id: string): ERC725DataStore | null {
    return store.get("ERC725DataStore", id) as ERC725DataStore | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get erc725id(): string {
    let value = this.get("erc725id");
    return value.toString();
  }

  set erc725id(value: string) {
    this.set("erc725id", Value.fromString(value));
  }

  get key(): Bytes {
    let value = this.get("key");
    return value.toBytes();
  }

  set key(value: Bytes) {
    this.set("key", Value.fromBytes(value));
  }

  get value(): Bytes | null {
    let value = this.get("value");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set value(value: Bytes | null) {
    if (value === null) {
      this.unset("value");
    } else {
      this.set("value", Value.fromBytes(value as Bytes));
    }
  }
}

export class ERC725ContractsCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save ERC725ContractsCreated entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ERC725ContractsCreated entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ERC725ContractsCreated", id.toString(), this);
  }

  static load(id: string): ERC725ContractsCreated | null {
    return store.get(
      "ERC725ContractsCreated",
      id
    ) as ERC725ContractsCreated | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get erc725id(): string {
    let value = this.get("erc725id");
    return value.toString();
  }

  set erc725id(value: string) {
    this.set("erc725id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Block extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Block entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Block entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Block", id.toString(), this);
  }

  static load(id: string): Block | null {
    return store.get("Block", id) as Block | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): Bytes | null {
    let value = this.get("hash");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes | null) {
    if (value === null) {
      this.unset("hash");
    } else {
      this.set("hash", Value.fromBytes(value as Bytes));
    }
  }
}
