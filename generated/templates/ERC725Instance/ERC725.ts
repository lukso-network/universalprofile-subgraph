// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ContractCreated extends ethereum.Event {
  get params(): ContractCreated__Params {
    return new ContractCreated__Params(this);
  }
}

export class ContractCreated__Params {
  _event: ContractCreated;

  constructor(event: ContractCreated) {
    this._event = event;
  }

  get contractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DataChanged extends ethereum.Event {
  get params(): DataChanged__Params {
    return new DataChanged__Params(this);
  }
}

export class DataChanged__Params {
  _event: DataChanged;

  constructor(event: DataChanged) {
    this._event = event;
  }

  get key(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get value(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class Executed extends ethereum.Event {
  get params(): Executed__Params {
    return new Executed__Params(this);
  }
}

export class Executed__Params {
  _event: Executed;

  constructor(event: Executed) {
    this._event = event;
  }

  get _operation(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UniversalReceiver extends ethereum.Event {
  get params(): UniversalReceiver__Params {
    return new UniversalReceiver__Params(this);
  }
}

export class UniversalReceiver__Params {
  _event: UniversalReceiver;

  constructor(event: UniversalReceiver) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get typeId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get returnedValue(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get receivedData(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class ValueReceived extends ethereum.Event {
  get params(): ValueReceived__Params {
    return new ValueReceived__Params(this);
  }
}

export class ValueReceived__Params {
  _event: ValueReceived;

  constructor(event: ValueReceived) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ERC725 extends ethereum.SmartContract {
  static bind(address: Address): ERC725 {
    return new ERC725("ERC725", address);
  }

  dataKeys(param0: BigInt): Bytes {
    let result = super.call("dataKeys", "dataKeys(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBytes();
  }

  try_dataKeys(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("dataKeys", "dataKeys(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getData(_key: Bytes): Bytes {
    let result = super.call("getData", "getData(bytes32):(bytes)", [
      ethereum.Value.fromFixedBytes(_key)
    ]);

    return result[0].toBytes();
  }

  try_getData(_key: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getData", "getData(bytes32):(bytes)", [
      ethereum.Value.fromFixedBytes(_key)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  isValidSignature(_hash: Bytes, _signature: Bytes): Bytes {
    let result = super.call(
      "isValidSignature",
      "isValidSignature(bytes32,bytes):(bytes4)",
      [
        ethereum.Value.fromFixedBytes(_hash),
        ethereum.Value.fromBytes(_signature)
      ]
    );

    return result[0].toBytes();
  }

  try_isValidSignature(
    _hash: Bytes,
    _signature: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "isValidSignature",
      "isValidSignature(bytes32,bytes):(bytes4)",
      [
        ethereum.Value.fromFixedBytes(_hash),
        ethereum.Value.fromBytes(_signature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  dataCount(): BigInt {
    let result = super.call("dataCount", "dataCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_dataCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("dataCount", "dataCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allDataKeys(): Array<Bytes> {
    let result = super.call("allDataKeys", "allDataKeys():(bytes32[])", []);

    return result[0].toBytesArray();
  }

  try_allDataKeys(): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("allDataKeys", "allDataKeys():(bytes32[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  universalReceiver(_typeId: Bytes, _data: Bytes): Bytes {
    let result = super.call(
      "universalReceiver",
      "universalReceiver(bytes32,bytes):(bytes32)",
      [ethereum.Value.fromFixedBytes(_typeId), ethereum.Value.fromBytes(_data)]
    );

    return result[0].toBytes();
  }

  try_universalReceiver(
    _typeId: Bytes,
    _data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "universalReceiver",
      "universalReceiver(bytes32,bytes):(bytes32)",
      [ethereum.Value.fromFixedBytes(_typeId), ethereum.Value.fromBytes(_data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ExecuteCall extends ethereum.Call {
  get inputs(): ExecuteCall__Inputs {
    return new ExecuteCall__Inputs(this);
  }

  get outputs(): ExecuteCall__Outputs {
    return new ExecuteCall__Outputs(this);
  }
}

export class ExecuteCall__Inputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get _operation(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class ExecuteCall__Outputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class SetDataCall extends ethereum.Call {
  get inputs(): SetDataCall__Inputs {
    return new SetDataCall__Inputs(this);
  }

  get outputs(): SetDataCall__Outputs {
    return new SetDataCall__Outputs(this);
  }
}

export class SetDataCall__Inputs {
  _call: SetDataCall;

  constructor(call: SetDataCall) {
    this._call = call;
  }

  get _key(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _value(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetDataCall__Outputs {
  _call: SetDataCall;

  constructor(call: SetDataCall) {
    this._call = call;
  }
}

export class UniversalReceiverCall extends ethereum.Call {
  get inputs(): UniversalReceiverCall__Inputs {
    return new UniversalReceiverCall__Inputs(this);
  }

  get outputs(): UniversalReceiverCall__Outputs {
    return new UniversalReceiverCall__Outputs(this);
  }
}

export class UniversalReceiverCall__Inputs {
  _call: UniversalReceiverCall;

  constructor(call: UniversalReceiverCall) {
    this._call = call;
  }

  get _typeId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UniversalReceiverCall__Outputs {
  _call: UniversalReceiverCall;

  constructor(call: UniversalReceiverCall) {
    this._call = call;
  }

  get returnValue(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}
